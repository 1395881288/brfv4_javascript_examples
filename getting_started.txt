Beyond Reality Face SDK - v4.0.0 (BRFv4)

------------------------------------
--- Getting started - Javascript ---
------------------------------------

--- "Minimal Webcam": please take a look at minimalWebcam.html

--- DOM

We need a <video> for the webcam playback and a <canvas> to draw the video data to and get the pixel array from.

--- JS

	function startCamera()
	function waitForSDK()
	function initSDK()
	function trackFaces()

startCamera:

BRFv4 needs to know the dimensions of the image data it will work on. So the first thing to do is initializing the webcam.
A camera may or may not be able to deliver the requested resolution. That's why we need to wait for the final video
dimensions before initializing the SDK.

waitForSDK:

The SDK itself also needs to initialize its data internally. So after obtaining the dimensions we need to
wait for the SDK to be ready (this usually takes 3 seconds on a modern computer) and then ...

initSDK:

Dimensions are known and the SDK is ready. So now it's time to call BRFManager.init with the image dimensions.
Then we setup an interval of 30FPS to ...

trackFaces:

We want to look into a mirror. That's why the canvas gets transformed, the video gets drawn and the canvas
gets transformed again to draw the results. Then the 68 landmarks of a face get drawn onto the canvas.


--- "Minimal Image": please take a look at minimalImage.html

--- DOM

We need an <img> and a <canvas> to draw the image data to and get the pixel array from.

--- JS

	function waitForSDK()
	function initSDK()
	function trackFaces()

Since the img tag gets loaded before JS is executed we don't need to wait for the image dimensions and can immediately ...

waitForSDK:

The SDK itself needs to initialize its data internally. Once it is ready (this usually takes 3 seconds on a modern computer)
we can ...

initSDK:

Dimensions are known and the SDK is ready. So now it's time to call BRFManager.init with the image dimensions.

trackFaces:

BRFv4 is made to work on an image data stream. So we need to call BRFManager.update a few times to get a decent result
on a single image.


